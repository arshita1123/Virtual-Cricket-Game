# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MyCricketGame_GUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox

from OpenMenu import Ui_Dialog as Open  # importing open window dialogbox
from NewMenu import Ui_Dialog as New  # importing new window dialogbox
from EvaluateMenu import Ui_MainWindow as Eva  # importing evaluate window
from CalculatePoints import player_points   #importing calculated points dictionary

import sqlite3
import logging

try:
    obj1 = sqlite3.connect("MyCricketGame_Database.db") #CONNECTING TO DATABASE
    #obj1 = sqlite3.connect("fandatabase.db")
    obj2 = obj1.cursor()
except:
    print("Database not found")
    
logging.basicConfig(level=logging.INFO)

class Ui_MainWindow(object):

    def __init__(self): #INITIALIZING WINDOWS
        self.newDialog = QtWidgets.QMainWindow()
        self.new_screen = New()
        self.new_screen.setupUi(self.newDialog)

        self.EvaluateWindow = QtWidgets.QMainWindow()
        self.eval_screen = Eva()
        self.eval_screen.setupUi(self.EvaluateWindow)

        self.openDialog = QtWidgets.QMainWindow()
        self.open_screen = Open()
        self.open_screen.setupUi(self.openDialog)
    
    def setupUi(self, MainWindow):  #SETTING UP THE GRAPHICAL USER INTERFACE
        
        # INITIALISING POINTS AND COUNTS
        self.avail_points = 1000
        self.used_points = 0
        self.totalcount = 0
        self.batsmencount = 0
        self.bowlerscount = 0
        self.alrdscount = 0
        self.wicketerscount = 0

        # INITIALIZING LISTS
        self.a = []  # bowler names list
        self.b = []  # batsman nameslist
        self.c = []  # allrounder names list
        self.d = []  # wicketer names list
        self.list1 = []  # SelectedPlayer's list
        
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(708, 692)
        MainWindow.setMinimumSize(QtCore.QSize(708, 692))
        MainWindow.setMaximumSize(QtCore.QSize(708, 692))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0,128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.PlaceholderText, brush)
        MainWindow.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("Bookman Old Style")
        font.setPointSize(9)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        MainWindow.setFont(font)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setStyleSheet("background-color:rgb(255, 255, 255);")
        self.centralwidget.setObjectName("centralwidget")
        self.team_name = QtWidgets.QLabel(self.centralwidget)
        self.team_name.setGeometry(QtCore.QRect(150, 12, 401, 61))
        font = QtGui.QFont()
        font.setFamily("Segoe Script")
        font.setPointSize(12)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)

        #TEAM NAME
        self.team_name.setFont(font)
        self.team_name.setStyleSheet("background-color:rgb(255, 255, 255);")
        self.team_name.setAlignment(QtCore.Qt.AlignCenter)
        self.team_name.setObjectName("team_name")
        #self.label = QtWidgets.QLabel(self.centralwidget)
        #self.label.setGeometry(QtCore.QRect(11, 249, 16, 17))
        font = QtGui.QFont()
        font.setFamily("Bookman Old Style")
        font.setPointSize(9)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        #self.label.setFont(font)
        #self.label.setText("")
        #self.label.setObjectName("label")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(10, 50, 130, 30))
        font = QtGui.QFont()
        font.setFamily("Segoe Print")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setStyleSheet("background-color:rgb(210, 212, 73)")
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(395, 300, 16, 16))
        self.label_5.setText("")
        self.label_5.setObjectName("label_5")
        
        self.wicketcount = QtWidgets.QLabel(self.centralwidget)
        self.wicketcount.setGeometry(QtCore.QRect(300, 80, 31, 51))
        font = QtGui.QFont()
        font.setFamily("Bookman Old Style")
        font.setPointSize(9)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.wicketcount.setFont(font)
        self.wicketcount.setStyleSheet("background-color:rgb(210, 212, 73);color:rgb(133, 255, 174)")
        self.wicketcount.setIndent(10)
        self.wicketcount.setObjectName("wicketcount")
        
        self.Batsman = QtWidgets.QLabel(self.centralwidget)
        self.Batsman.setGeometry(QtCore.QRect(10, 80, 130, 51))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        self.Batsman.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("Bookman Old Style")
        font.setPointSize(9)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.Batsman.setFont(font)
        self.Batsman.setStyleSheet("background-color:rgb(210, 212, 73)")
        self.Batsman.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.Batsman.setIndent(1)
        self.Batsman.setObjectName("Batsman")

        #BATSMEN COUNTER
        self.batcount = QtWidgets.QLabel(self.centralwidget)
        self.batcount.setGeometry(QtCore.QRect(140, 80, 31, 51))
        font = QtGui.QFont()
        font.setFamily("Bookman Old Style")
        font.setPointSize(9)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.batcount.setFont(font)
        self.batcount.setStyleSheet("background-color:rgb(210, 212, 73);\n"
"color:rgb(133, 255, 174);")
        self.batcount.setObjectName("batcount")

        
        self.Bowler = QtWidgets.QLabel(self.centralwidget)
        self.Bowler.setGeometry(QtCore.QRect(520, 80, 131, 51))
        font = QtGui.QFont()
        font.setFamily("Bookman Old Style")
        font.setPointSize(9)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.Bowler.setFont(font)
        self.Bowler.setStyleSheet("background-color:rgb(210, 212, 73)")
        self.Bowler.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.Bowler.setObjectName("Bowler")

        #ALLROUNDERS COUNTER
        self.alrcount = QtWidgets.QLabel(self.centralwidget)
        self.alrcount.setGeometry(QtCore.QRect(480, 80, 41, 51))
        font = QtGui.QFont()
        font.setFamily("Bookman Old Style")
        font.setPointSize(9)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.alrcount.setFont(font)
        self.alrcount.setStyleSheet("background-color:rgb(210, 212, 73);color:rgb(133, 255, 174)")
        self.alrcount.setIndent(10)
        self.alrcount.setObjectName("alrcount")

        #BOWLERS COUNTER
        self.bowlcount = QtWidgets.QLabel(self.centralwidget)
        self.bowlcount.setGeometry(QtCore.QRect(650, 80, 51, 51))
        font = QtGui.QFont()
        font.setFamily("Bookman Old Style")
        font.setPointSize(9)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.bowlcount.setFont(font)
        self.bowlcount.setStyleSheet("background-color:rgb(210, 212, 73);color:rgb(133, 255, 174)")
        self.bowlcount.setIndent(10)
        self.bowlcount.setObjectName("bowlcount")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(20, 170, 331, 31))
        self.widget.setObjectName("widget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.widget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")

        #RADIO BUTTONS
        #WICKET KEEPER
        self.wicket_rb = QtWidgets.QRadioButton(self.widget)
        self.wicket_rb.setEnabled(False)
        font = QtGui.QFont()
        font.setFamily("Bookman Old Style")
        font.setPointSize(9)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.wicket_rb.setFont(font)
        self.wicket_rb.setObjectName("wicket_rb")
        self.horizontalLayout.addWidget(self.wicket_rb)

        #BATSMEN
        self.bat_rb = QtWidgets.QRadioButton(self.widget)
        self.bat_rb.setEnabled(False)
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.bat_rb.setFont(font)
        self.bat_rb.setTabletTracking(False)
        self.bat_rb.setAcceptDrops(False)
        self.bat_rb.setToolTipDuration(20)
        self.bat_rb.setStyleSheet("Batmans")
        self.bat_rb.setObjectName("bat_rb")
        self.horizontalLayout.addWidget(self.bat_rb)

        #ALL ROUNDERS
        self.alr_rb = QtWidgets.QRadioButton(self.widget)
        self.alr_rb.setEnabled(False)
        font = QtGui.QFont()
        font.setFamily("Bookman Old Style")
        font.setPointSize(9)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.alr_rb.setFont(font)
        self.alr_rb.setChecked(False)
        self.alr_rb.setObjectName("alr_rb")
        self.horizontalLayout.addWidget(self.alr_rb)

        #BOWLERS
        self.bowl_rb = QtWidgets.QRadioButton(self.widget)
        self.bowl_rb.setEnabled(False)
        font = QtGui.QFont()
        font.setFamily("Bookman Old Style")
        font.setPointSize(9)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.bowl_rb.setFont(font)
        self.bowl_rb.setObjectName("bowl_rb")
        self.horizontalLayout.addWidget(self.bowl_rb)
        
        self.widget1 = QtWidgets.QWidget(self.centralwidget)
        self.widget1.setGeometry(QtCore.QRect(10, 140, 691, 19))
        self.widget1.setObjectName("widget1")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.widget1)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.PointsAvailable = QtWidgets.QLabel(self.widget1)
        font = QtGui.QFont()
        font.setFamily("Bookman Old Style")
        font.setPointSize(9)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.PointsAvailable.setFont(font)
        self.PointsAvailable.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.PointsAvailable.setIndent(30)
        self.PointsAvailable.setObjectName("PointsAvailable")
        self.horizontalLayout_2.addWidget(self.PointsAvailable)

        #AVAILABLE POINTS COUNT
        self.count1 = QtWidgets.QLabel(self.widget1)
        font = QtGui.QFont()
        font.setFamily("Bookman Old Style")
        font.setPointSize(9)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.count1.setFont(font)
        self.count1.setStyleSheet("color:rgb(133, 255, 174)")
        self.count1.setAlignment(QtCore.Qt.AlignJustify|QtCore.Qt.AlignVCenter)
        self.count1.setIndent(-10)
        self.count1.setObjectName("count1")
        self.horizontalLayout_2.addWidget(self.count1)
        
        self.PointsUsed = QtWidgets.QLabel(self.widget1)
        font = QtGui.QFont()
        font.setFamily("Bookman Old Style")
        font.setPointSize(9)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.PointsUsed.setFont(font)
        self.PointsUsed.setIndent(100)
        self.PointsUsed.setObjectName("PointsUsed")
        self.horizontalLayout_2.addWidget(self.PointsUsed)

        #POINTS USED COUNT
        self.count2 = QtWidgets.QLabel(self.widget1)
        font = QtGui.QFont()
        font.setFamily("Bookman Old Style")
        font.setPointSize(9)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.count2.setFont(font)
        self.count2.setStyleSheet("color:rgb(133, 255, 174)")
        self.count2.setAlignment(QtCore.Qt.AlignJustify|QtCore.Qt.AlignVCenter)
        self.count2.setIndent(60)
        self.count2.setObjectName("count2")
        self.horizontalLayout_2.addWidget(self.count2)
        self.AllRounder = QtWidgets.QLabel(self.centralwidget)
        self.AllRounder.setGeometry(QtCore.QRect(330, 80, 151, 51))
        font = QtGui.QFont()
        font.setFamily("Bookman Old Style")
        font.setPointSize(9)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.AllRounder.setFont(font)
        self.AllRounder.setStyleSheet("background-color:rgb(210, 212, 73)")
        self.AllRounder.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.AllRounder.setObjectName("AllRounder")
        self.widget2 = QtWidgets.QWidget(self.centralwidget)
        self.widget2.setGeometry(QtCore.QRect(10, 210, 691, 421))
        self.widget2.setObjectName("widget2")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.widget2)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")

        #LIST WIDGET
        #AVAILABLE PLAYERS
        self.List1 = QtWidgets.QListWidget(self.widget2)
        self.List1.setStyleSheet("background-color:rgb(255, 255, 255);")
        self.List1.setObjectName("List1")
        self.horizontalLayout_3.addWidget(self.List1)
        self.label_7 = QtWidgets.QLabel(self.widget2)
        font = QtGui.QFont()
        font.setFamily("Segoe Print")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.horizontalLayout_3.addWidget(self.label_7)

        #SELECTED PLAYERS
        self.List2 = QtWidgets.QListWidget(self.widget2)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0,0,0,128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.PlaceholderText, brush)
        self.List2.setPalette(palette)
        self.List2.setStyleSheet("background-color:rgb(255, 255, 255);")
        self.List2.setObjectName("List2")
        self.horizontalLayout_3.addWidget(self.List2)
        self.WicketKeeper = QtWidgets.QLabel(self.centralwidget)
        self.WicketKeeper.setGeometry(QtCore.QRect(164, 80, 141, 51))
        font = QtGui.QFont()
        font.setFamily("Bookman Old Style")
        font.setPointSize(9)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.WicketKeeper.setFont(font)
        self.WicketKeeper.setStyleSheet("background-color:rgb(210, 212, 73)")
        self.WicketKeeper.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.WicketKeeper.setObjectName("WicketKeeper")
        self.label_4.raise_()
        self.team_name.raise_()
        self.label_7.raise_()
        self.List1.raise_()
        self.AllRounder.raise_()
        self.WicketKeeper.raise_()
       
        MainWindow.setCentralWidget(self.centralwidget)
        self.MenuBar = QtWidgets.QMenuBar(MainWindow)
        self.MenuBar.setGeometry(QtCore.QRect(0, 0, 708, 26))
        self.MenuBar.setObjectName("MenuBar")
        self.Menu = QtWidgets.QMenu(self.MenuBar)
        self.Menu.setObjectName("Menu")
        MainWindow.setMenuBar(self.MenuBar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        
        #HANDLING EVENTS
        #SHORTCUTS
        #FOR NEW TEAM
        self.NewTeam = QtWidgets.QAction(MainWindow)
        self.NewTeam.setShortcutVisibleInContextMenu(True)
        self.NewTeam.setObjectName("NewTeam")
        self.NewTeam.triggered.connect(self.NewFile)
        
        #FOR OPEN TEAM
        self.OpenTeam = QtWidgets.QAction(MainWindow)
        self.OpenTeam.setShortcutVisibleInContextMenu(True)
        self.OpenTeam.setObjectName("OpenTeam")
        self.OpenTeam.triggered.connect(self.OpenFile)
        
        #FOR SAVING TEAM
        self.SaveTeam = QtWidgets.QAction(MainWindow)
        self.SaveTeam.setShortcutVisibleInContextMenu(True)
        self.SaveTeam.setObjectName("SaveTeam")
        self.SaveTeam.triggered.connect(self.SaveFile)

        #FOR EVALUATING TEAM
        self.EvaluateTeam = QtWidgets.QAction(MainWindow)
        self.EvaluateTeam.setShortcutVisibleInContextMenu(True)
        self.EvaluateTeam.setObjectName("EvaluateTeam")
        self.EvaluateTeam.triggered.connect(self.EvaluateFile)

         
        self.Menu.addAction(self.NewTeam)
        self.Menu.addAction(self.OpenTeam)
        self.Menu.addAction(self.EvaluateTeam)
        self.Menu.addAction(self.SaveTeam)
        self.MenuBar.addAction(self.Menu.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
          #DOUBLE CLICK IN LIST WIDGETS
        self.List1.itemDoubleClicked.connect(self.RemoveList1)
        self.List2.itemDoubleClicked.connect(self.RemoveList2)

        # -----stats of player
        self.stats = {}
        try:
            
            self.new_screen.savename.clicked.connect(self.namechange)
        except:
            print("Handled error")

        # RADIOBUTTONS  CLICK
        self.bat_rb.clicked.connect(self.load_names)
        self.wicket_rb.clicked.connect(self.load_names)
        self.bowl_rb.clicked.connect(self.load_names)
        self.alr_rb.clicked.connect(self.load_names) 
        
      

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "FantasyCricketGame"))
        self.team_name.setText(_translate("MainWindow", " TEAM NAME "))
        self.label_4.setText(_translate("MainWindow", "Your Selections"))
        self.wicketcount.setText(_translate("MainWindow", "##"))
        self.Batsman.setText(_translate("MainWindow", "Batsmen(Bat)"))
        self.batcount.setText(_translate("MainWindow", "##"))
        self.Bowler.setText(_translate("MainWindow", "Bowlers(Bow)"))
        self.alrcount.setText(_translate("MainWindow", "##"))
        self.bowlcount.setText(_translate("MainWindow", "##"))
        self.wicket_rb.setText(_translate("MainWindow", "WK"))
        self.bat_rb.setText(_translate("MainWindow", "BAT"))
        self.alr_rb.setText(_translate("MainWindow", "AR"))
        self.bowl_rb.setText(_translate("MainWindow", "BOW"))
        self.PointsAvailable.setText(_translate("MainWindow", "Points Available"))
        self.count1.setStatusTip(_translate("MainWindow", "max point=100"))
        self.count1.setText(_translate("MainWindow", "00"))
        self.PointsUsed.setText(_translate("MainWindow", "Points Used"))
        self.count2.setText(_translate("MainWindow", "00"))
        self.AllRounder.setText(_translate("MainWindow", "Allrounders(AR)"))
        self.label_7.setText(_translate("MainWindow", ">"))
        self.WicketKeeper.setText(_translate("MainWindow", "WicketKeeper(WK)"))
        self.Menu.setTitle(_translate("MainWindow", "Manage Teams"))
        self.NewTeam.setText(_translate("MainWindow", "New Team"))
        self.NewTeam.setStatusTip(_translate("MainWindow", "enter team name"))
        self.NewTeam.setShortcut(_translate("MainWindow", "Ctrl+N"))
        self.OpenTeam.setText(_translate("MainWindow", "Open Team"))
        self.OpenTeam.setStatusTip(_translate("MainWindow", "opening team"))
        self.OpenTeam.setShortcut(_translate("MainWindow", "Ctrl+O"))
        self.SaveTeam.setText(_translate("MainWindow", "Save Team"))
        self.SaveTeam.setStatusTip(_translate("MainWindow", "saving team.."))
        self.SaveTeam.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.EvaluateTeam.setText(_translate("MainWindow", "Evaluate Team"))
        self.EvaluateTeam.setShortcut(_translate("MainWindow", "Ctrl+E"))
    

        
    #EVENT HANDLING METHODS:
    #FOR CREATE NEW TEAM MENU
    def NewFile(self):
        self.newDialog.show()
        #self.new_screen.savename.clicked.connect(self.namechange)

    #FOR OPEN TEAM MENU:
    def OpenFile(self):
        self.open_screen.setupUi(self.openDialog)
        self.openDialog.show()
        self.open_screen.openbtn.clicked.connect(self.openteam)

    #FOR SAVE TEAM MENU:
    def SaveFile(self):
        if not self.error():  # IF THERE IS AN ERROR
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setInformativeText('Insufficient Players OR Points !!')
            msg.setWindowTitle("Selection Error")
            msg.exec_()
        elif self.error():  # IF NO ERROR
            try:
                obj2.execute("SELECT DISTINCT name FROM teams;")
                x = obj2.fetchall()
                for i in x:
                    if self.team_name.text() == i[0]:  # CHECKING IF THE TEAMNAME ALREADY EXISTS
                        logging.debug('Updating already there')
                        obj2.execute("DELETE  FROM teams WHERE name='" + self.team_name.text() + "';")  # DELETING TO UPDATE TEAM
            except:
                logging.debug('error')
            for i in range(self.List2.count()):
                logging.debug('----addding--')
                logging.debug('teamname: ',self.team_name.text())
                logging.debug('playername: ',self.list1[i])
                logging.debug('points: ', player_points[self.list1[i]])
                try:
                    obj2.execute("INSERT INTO teams (name,players,value) VALUES (?,?,?)",
                                     (self.team_name.text(), self.list1[i], player_points[self.list1[i]]))


                except:
                    logging.debug('Error in operation!')
            obj1.commit()
            self.EvaluateFile()
        else:
            logging.debug('---error in operation')

    #FOR EVALUATE TEAM MENU:
    def EvaluateFile(self):
        self.eval_screen.setupUi(self.EvaluateWindow)
        self.EvaluateWindow.show()
    
    #UPON OPEN TEAM SELECTED
    def openteam(self): 
        self.reset()
        teamname = self.open_screen.open_cb.currentText()
        self.team_name.setText(teamname)
        self.enablebuttons()
        obj2.execute("SELECT players from teams WHERE name= '" + teamname + "';")
        x = obj2.fetchall()
        score = []
        for i in x:
            obj2.execute("SELECT value from stats WHERE player='" + i[0] + "';")
            y = obj2.fetchone()
            score.append(y[0])
        logging.debug(score)
        sum = 0
        for i in score:
            sum += i
        self.List2.clear()
        self.load_names()
        for i in x:
            self.List2.addItem(i[0])
            self.list1.append(i[0])
            self.conditions_1(i[0])
        self.used_points = sum
        self.avail_points = 1000 - sum
        self.count1.setText(str(self.avail_points))
        self.count2.setText(str(self.used_points))
        self.openDialog.close()

    #HANDLING AND DISPLAYING ERROR MESSAGES:
    def error(self):  # Handling and displaying error messages
        msg = QMessageBox()
        if self.avail_points <= 0:
            self.count1.setText('0')
            msg.setIcon(QMessageBox.Critical)
            msg.setInformativeText('You have no enough points left!')
            msg.setWindowTitle("Selection Cricket")
            msg.exec_()
            return 0
        if self.wicketerscount > 1:
            msg.setIcon(QMessageBox.Critical)
            msg.setInformativeText('Only 1 wicketkeeper is allowed!')
            msg.setWindowTitle("Error")
            msg.exec_()
            return 0
        if self.totalcount > 11:
            msg.setIcon(QMessageBox.Critical)
            msg.setInformativeText('No more than 11 players allowed!')
            msg.setWindowTitle("Selection Error")
            msg.exec_()
            logging.debug('available points',self.avail_points)
            return 0
        if self.batsmencount > 5:
            msg.setIcon(QMessageBox.Critical)
            msg.setInformativeText('Only 5 batsmen are allowed!')
            msg.setWindowTitle("Error")
            msg.exec_()
        if self.bowlerscount > 5:
            msg.setIcon(QMessageBox.Critical)
            msg.setInformativeText('Only 5 bowlers are allowed!')
            msg.setWindowTitle("Error")
            msg.exec_()
            return 0
        if self.alrdscount > 3:
            msg.setIcon(QMessageBox.Critical)
            msg.setInformativeText('Only 3 all rounders are allowed!')
            msg.setWindowTitle("Error")
            msg.exec_()
            return 0
        if self.totalcount < 11:
            return 0
        if self.wicketerscount < 1:
            return 0
        if self.batsmencount<1:
            return 0
        if self.bowlerscount<1:
            return 0
        if self.alrdscount<1:
            return 0
        return 1
    
    # TO RESET ALL COUNTS AND LISTS
    def reset(self):
            
        self.enablebuttons()
        self.load_names()
        self.used_points = 0
        self.alrdscount = 0
        self.wicketerscount = 0
        self.batsmencount = 0
        self.bowlerscount = 0
        self.totalcount = 0
        self.avail_points = 1000
        self.count1.setText(str(self.avail_points))
        self.count2.setText(str(self.used_points))
        self.bowlcount.setText(str(self.bowlerscount))
        self.batcount.setText(str(self.batsmencount))
        self.alrcount.setText(str(self.alrdscount))
        self.wicketcount.setText(str(self.wicketerscount))
        self.list1.clear()
        self.load_names()

        self.List2.clear()
        
    #ON RADIOBUTTONS CLICKED
    def load_names(self):
        Batsman = 'BAT'
        WicketKeeper = 'WK'
        Allrounder = 'AR'
        Bowler = 'BWL'
        sql1 = "SELECT player,value from stats WHERE ctg = '" + Batsman + "';"
        sql2 = "SELECT player,value from stats WHERE ctg = '" + WicketKeeper + "';"
        sql3 = "SELECT player,value from stats WHERE ctg ='" + Allrounder + "';"
        sql4 = "SELECT player,value from stats WHERE ctg = '" + Bowler + "';"

        obj2.execute(sql1)
        x = obj2.fetchall()
        obj2.execute(sql4)
        y = obj2.fetchall()
        obj2.execute(sql3)
        z = obj2.fetchall()
        obj2.execute(sql2)
        w = obj2.fetchall()

        batsmen = []
        bowlers = []
        allrounders = []
        wcktkeepers = []

        for k in x:
            batsmen.append(k[0])
            self.b.append(k[0])
            self.stats[k[0]] = k[1]
        for k in y:
            bowlers.append(k[0])
            self.stats[k[0]] = k[1]
            self.a.append(k[0])
        for k in w:
            wcktkeepers.append(k[0])
            self.stats[k[0]] = k[1]
            self.d.append(k[0])
        for k in z:
            allrounders.append(k[0])
            self.stats[k[0]] = k[1]
            self.c.append(k[0])
        for i in self.list1:
            if i in allrounders:
                allrounders.remove(i)
            elif i in batsmen:
                batsmen.remove(i)
            elif i in bowlers:
                bowlers.remove(i)
            elif i in wcktkeepers:
                wcktkeepers.remove(i)
        
        if self.bat_rb.isChecked() == True:
            self.List1.clear()
            for i in range(len(batsmen)):
                item = QtWidgets.QListWidgetItem(batsmen[i])
                font = QtGui.QFont()
                font.setBold(True)
                font.setWeight(75)
                item.setFont(font)
                self.List1.addItem(item)
        elif self.bowl_rb.isChecked() == True:
            self.List1.clear()
            for i in range(len(bowlers)):
                item = QtWidgets.QListWidgetItem(bowlers[i])
                font = QtGui.QFont()
                font.setBold(True)
                font.setWeight(75)
                item.setFont(font)
                self.List1.addItem(item)
        elif self.alr_rb.isChecked() == True:
            self.List1.clear()
            for i in range(len(allrounders)):
                item = QtWidgets.QListWidgetItem(allrounders[i])
                font = QtGui.QFont()
                font.setBold(True)
                font.setWeight(75)
                item.setFont(font)
                self.List1.addItem(item)

        elif self.wicket_rb.isChecked() == True:
            self.List1.clear()
            for i in range(len(wcktkeepers)):
                item = QtWidgets.QListWidgetItem(wcktkeepers[i])
                font = QtGui.QFont()
                font.setBold(True)
                font.setWeight(75)
                item.setFont(font)
                self.List1.addItem(item)
      
    def enablebuttons(self):
        self.bat_rb.setEnabled(True)
        self.bowl_rb.setEnabled(True)
        self.alr_rb.setEnabled(True)
        self.wicket_rb.setEnabled(True)
        
    #REMOVE PLAYER FROM AVAILABLE PLAYERS LIST AND ADD IT TO SELECTED PLAYERS LIST   
    def RemoveList1(self, item):  
        self.conditions_1(item.text())
        self.List1.takeItem(self.List1.row(item))
        self.List2.addItem(item.text())
        self.totalcount = self.List2.count()
        self.list1.append(item.text())
        self.error()
        
    #REMOVE PLAYER FROM SELECTED PLAYERS LIST AND ADD IT BACK TO AVAILABLE PLAYERS LIST  
    def RemoveList2(self, item):
        self.conditions_2(item.text())
        self.List2.takeItem(self.List2.row(item))
        self.List1.addItem(item.text())
        self.totalcount = self.List2.count()
        self.list1.remove(item.text())
        #self.error()
        
    # Adding and Deducting respective points from CalculatePoints.py  
    def conditions_1(self, cat):  
        self.avail_points -= self.stats[cat]
        self.used_points += self.stats[cat]
        if cat in self.a:
            self.bowlerscount += 1
        elif cat in self.d:
            self.wicketerscount += 1
        elif cat in self.c:
            self.alrdscount += 1
        elif cat in self.b:
            self.batsmencount += 1

        self.count1.setText(str(self.avail_points))
        self.count2.setText(str(self.used_points))
        self.bowlcount.setText(str(self.bowlerscount))
        self.batcount.setText(str(self.batsmencount))
        self.alrcount.setText(str(self.alrdscount))
        self.wicketcount.setText(str(self.wicketerscount))
        
    # Adding and Deducting respective points from CalculatePoints.py
    def conditions_2(self, cat):  
        self.avail_points += self.stats[cat]
        self.used_points -= self.stats[cat]
        if cat in self.a:
            self.bowlerscount -= 1
        elif cat in self.d:
            self.wicketerscount -= 1
        elif cat in self.c:
            self.alrdscount -= 1
        elif cat in self.b:
            self.batsmencount -= 1

        self.count1.setText(str(self.avail_points))
        self.count2.setText(str(self.used_points))
        self.bowlcount.setText(str(self.bowlerscount))
        self.batcount.setText(str(self.batsmencount))
        self.alrcount.setText(str(self.alrdscount))
        self.wicketcount.setText(str(self.wicketerscount))

    def namechange(self):
        
            
            teamname = self.new_screen.team_name.text()
            obj2.execute("SELECT DISTINCT name FROM teams")
            l = obj2.fetchall()
            for i in l:
                logging.debug('team names',i)
                if i[0] == teamname:
                    logging.debug('inder same name')
                    msg = QtWidgets.QMessageBox()
                    msg.setIcon(QtWidgets.QMessageBox.Information)
                    msg.setText("Team with same name already exists!!\nPlease choose another name")
                    msg.setWindowTitle("Invalid Team Name")
                    msg.exec_()
                    return 0
            if len(teamname) == 0:
                msg = QtWidgets.QMessageBox()
                msg.setIcon(QtWidgets.QMessageBox.Warning)
                msg.setText("You cannot leave the field blank!!!")
                msg.setWindowTitle("Invalid Team Name")
                msg.exec_()
                return 0
            elif teamname.isnumeric():
                msg = QtWidgets.QMessageBox()
                msg.setIcon(QtWidgets.QMessageBox.Warning)
                msg.setText("Please enter a valid teamname\n(Name must contain atleast one character)!!")
                msg.setWindowTitle("Invalid Team Name")
                msg.exec_()
                return 0
            else:
                self.reset()
                self.tname = self.new_screen.team_name.text()
                self.team_name.setText(self.tname)
                self.newDialog.close()
                return 0
        
    


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
